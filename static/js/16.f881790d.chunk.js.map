{"version":3,"file":"static/js/16.f881790d.chunk.js","mappings":"wKAEA,MAAMA,E,MAAcC,GAAAA,OAAa,CAC7BC,QAAS,uDACTC,QAAS,CAAE,kBAAmB,iB,uBCClC,MAAMC,GAAQC,EAAAA,EAAAA,OAAK,IAAM,wDACnBC,GAASD,EAAAA,EAAAA,OAAK,IAAM,gCACpBE,GAAeF,EAAAA,EAAAA,OAAK,IAAM,gCAE1BG,EAAYA,KACd,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAa,KAC9BC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAmB,IAEjDG,EAAYC,IACdC,EAAAA,EAAAA,KAACZ,EAAK,CAAYa,KAAMF,EAAEE,KAAMC,MAAOH,EAAEG,MAAOC,OAAQJ,EAAEI,OAAOF,KAAMG,KAAMA,IAAML,GAAvEA,EAAEM,KAGlBC,EAAAA,EAAAA,YAAU,KACN,WACI,MAAM,KAAEb,SAAeT,EAAYuB,IAAI,WACvCb,EAAQD,GACRA,EAAKe,MAAK,CAACC,EAAqBC,IAAyBD,EAAER,KAAOS,EAAET,MAAQ,EAAIQ,EAAER,KAAOS,EAAET,KAAO,EAAI,IACtGJ,EAAcJ,EAAKkB,KAAKC,GAAgBd,EAASc,KACpD,EALD,EAKI,GACL,IAYH,OACIC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUf,EAAAA,EAAAA,KAACgB,EAAAA,EAAO,IAAIC,SAAA,EAC5BJ,EAAAA,EAAAA,MAAA,MAAIK,UAAU,OAAO,cAAY,mBAAkBD,SAAA,CAC9C,IAAI,oBACa,QAEtBjB,EAAAA,EAAAA,KAACV,EAAM,CAAC6B,OAhBMpB,IAClB,MAAMqB,EAAc3B,EAAK4B,QAAQC,IAC7B,MAAMH,EAAS,IAAII,OAAOxB,EAAEyB,OAAOC,MAAO,MACpCC,EAAQJ,EAAGrB,KACjB,OAAOkB,EAAOQ,KAAKD,EAAM,IAG7B7B,EAAcuB,EAAYT,KAAKC,GAAgBd,EAASc,KAAO,KAU3DZ,EAAAA,EAAAA,KAACT,EAAY,CAAA0B,SAAGrB,EAAWgC,OAAuBhC,GAAdI,EAAAA,EAAAA,KAAC6B,EAAAA,EAAO,QACrC,E,cCvCnB,MAAMC,GAAOzC,EAAAA,EAAAA,OAAK,IAAM,+BAIlB0C,EAAQA,KACV,MAAOC,EAAWC,IAAiBtC,EAAAA,EAAAA,UAAe,OAC5C,OAAEuC,IAAWC,EAAAA,EAAAA,MAWnB,OATA7B,EAAAA,EAAAA,YAAU,KACN,WACI,MAAM,KAAEb,SAAeT,EAAYuB,IAAI,WAAD6B,OAAYF,EAAM,gBACxDD,EACIxC,EAAKkB,KAAKC,IAAcZ,EAAAA,EAAAA,KAAC8B,EAAI,CAAe7B,KAAMW,EAAKX,KAAMoC,YAAazB,EAAK0B,aAAarC,MAAzDW,EAAKP,MAE/C,EALD,EAKI,GACL,CAAC6B,KAGArB,EAAAA,EAAAA,MAAA0B,EAAAA,SAAA,CAAAtB,SAAA,EACIJ,EAAAA,EAAAA,MAAA,MAAIK,UAAU,OAAMD,SAAA,CAAC,mBAAoB,OAANiB,QAAM,IAANA,OAAM,EAANA,EAAQM,kBAC3CxC,EAAAA,EAAAA,KAACyC,EAAAA,GAAI,CAACC,GAAG,IAAIxB,UAAU,oBAAmBD,SAAC,2BAG1Ce,IAAahC,EAAAA,EAAAA,KAACgB,EAAAA,EAAO,MACvB,ECxBL2B,EAASA,KAEP9B,EAAAA,EAAAA,MAAC+B,EAAAA,GAAM,CAAA3B,SAAA,EACHjB,EAAAA,EAAAA,KAAC6C,EAAAA,GAAK,CAACC,KAAK,IAAIC,SAAS/C,EAAAA,EAAAA,KAACR,EAAS,OACnCQ,EAAAA,EAAAA,KAAC6C,EAAAA,GAAK,CAACC,KAAK,kBAAkBC,SAAS/C,EAAAA,EAAAA,KAAC+B,EAAK,Q","sources":["service/RequestAPI.ts","Components/ListStates/ListState.tsx","Components/State/State.tsx","Components/Router.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst instanceAPI = axios.create({\n    baseURL: 'https://servicodados.ibge.gov.br/api/v1/localidades/',\n    headers: { 'X-Custom-Header': 'tmx-mercury' },\n});\n\nexport { instanceAPI };\n","import React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { instanceAPI } from '../../service/RequestAPI';\nimport { TCard } from '../../types';\nimport { Loading, Warning } from '../Feedback/Feedback';\n\nconst Cards = lazy(() => import('../Cards'));\nconst Search = lazy(() => import('../Search'));\nconst RenderResult = lazy(() => import('../Render'));\n\nconst ListState = () => {\n    const [data, setData] = useState<[]>([]);\n    const [renderData, setRenderData] = useState<[] | any>([]);\n\n    const getCards = (e: TCard) => (\n        <Cards key={e.id} nome={e.nome} sigla={e.sigla} regiao={e.regiao.nome} link={() => e} />\n    );\n\n    useEffect(() => {\n        (async () => {\n            const { data } = await instanceAPI.get('estados');\n            setData(data);\n            data.sort((a: { nome: number }, b: { nome: number }) => (a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0));\n            setRenderData(data.map((info: TCard) => getCards(info)));\n        })();\n    }, []);\n\n    const searchAction = (e: any) => {\n        const searchCards = data.filter((el: any) => {\n            const search = new RegExp(e.target.value, 'gi');\n            const input = el.nome;\n            return search.test(input);\n        });\n\n        setRenderData(searchCards.map((info: TCard) => getCards(info)));\n    };\n\n    return (\n        <Suspense fallback={<Loading />}>\n            <h1 className=\"py-3\" data-testid=\"title-list-state\">\n                {' '}\n                Estados do Brasil{' '}\n            </h1>\n            <Search search={searchAction} />\n            <RenderResult>{!renderData.length ? <Warning /> : renderData}</RenderResult>\n        </Suspense>\n    );\n};\n\nexport { ListState };\n","import React, { lazy, useEffect, useState } from 'react';\n\nimport { Link, useParams } from 'react-router-dom';\n\nimport { Loading } from '../Feedback/Feedback';\nconst City = lazy(() => import('../City'));\n\nimport { instanceAPI } from '../../service/RequestAPI';\n\nconst State = () => {\n    const [dataState, setDataStates] = useState<null>(null);\n    const { estado } = useParams();\n\n    useEffect(() => {\n        (async () => {\n            const { data } = await instanceAPI.get(`estados/${estado}/municipios`);\n            setDataStates(\n                data.map((info: any) => <City key={info.id} nome={info.nome} mesorregiao={info.microrregiao.nome} />)\n            );\n        })();\n    }, [estado]);\n\n    return (\n        <>\n            <h1 className=\"mt-3\">Munc√≠pios do {estado?.toUpperCase()}</h1>\n            <Link to=\"/\" className=\"btn btn-link mb-3\">\n                Voltar para os estados\n            </Link>\n            {dataState || <Loading />}\n        </>\n    );\n};\n\nexport { State };\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport ListState from './ListStates';\nimport { State } from './State';\n\nconst Router = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<ListState />} />\n            <Route path=\"/estado/:estado\" element={<State />} />\n        </Routes>\n    );\n};\n\nexport { Router as default };\n"],"names":["instanceAPI","axios","baseURL","headers","Cards","lazy","Search","RenderResult","ListState","data","setData","useState","renderData","setRenderData","getCards","e","_jsx","nome","sigla","regiao","link","id","useEffect","get","sort","a","b","map","info","_jsxs","Suspense","fallback","Loading","children","className","search","searchCards","filter","el","RegExp","target","value","input","test","length","Warning","City","State","dataState","setDataStates","estado","useParams","concat","mesorregiao","microrregiao","_Fragment","toUpperCase","Link","to","Router","Routes","Route","path","element"],"sourceRoot":""}