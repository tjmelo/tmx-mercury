{"version":3,"sources":["service/RequestAPI.js","Components/ListState.tsx"],"names":["RequestAPI","Cards","lazy","Search","RenderResult","ListState","props","dataList","searchAction","bind","state","amount","axios","get","then","res","data","sort","a","b","nome","forEach","el","idx","push","sigla","regiao","link","setState","e","list","filter","toLowerCase","indexOf","target","value","dataMount","mount","this","length","fallback","className","search","React","Component"],"mappings":"iHAGeA,IAFX,+D,2ICIEC,EAAQC,gBAAK,kBAAM,uDACnBC,EAASD,gBAAK,kBAAM,iCACpBE,EAAeF,gBAAK,kBAAM,gCAS1BG,E,kDAKF,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAFVC,cACwB,EAEpB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKF,SAAW,GAChB,EAAKG,MAAQ,CAAEC,OAAQ,cAAC,IAAD,KAJH,E,gEAOH,IAAD,OAChBC,IAAMC,IAAIb,KAAYc,MAAK,SAAAC,GACvBA,EAAIC,KAAKC,MAAK,SAACC,EAAQC,GAAT,OACVD,EAAEE,KAAOD,EAAEC,MACJ,EACDF,EAAEE,KAAOD,EAAEC,KACX,EACA,KAEVL,EAAIC,KAAKK,SAAQ,SAACC,EAASC,GACvB,EAAKhB,SAASiB,KACV,cAACvB,EAAD,CAEImB,KAAME,EAAGF,KACTK,MAAOH,EAAGG,MACVC,OAAQJ,EAAGI,OAAON,KAClBO,KAAM,kBAAML,IAJPC,OAQjB,EAAKK,SAAS,CAAEjB,OAAQ,EAAKJ,gB,mCAIxBsB,GAAS,IAAD,OACjBjB,IAAMC,IAAIb,KAAYc,MAAK,SAAAgB,GACvB,EAAKvB,SAAW,GAChBuB,EAAKd,KAAOc,EAAKd,KAAKe,QAClB,SAACT,GAAD,OAKe,IAJXA,EAAGF,KACEY,cACAC,QACGJ,EAAEK,OAAOC,MAAMH,kBAG/BF,EAAKd,KAAKC,MAAK,SAACC,EAAQC,GAAT,OACXD,EAAEE,KAAOD,EAAEC,MACJ,EACDF,EAAEE,KAAOD,EAAEC,KACX,EACA,KAGVU,EAAKd,KAAKK,SAAQ,SAACC,EAASC,GACxB,IAAIa,EACA,cAACnC,EAAD,CAEImB,KAAME,EAAGF,KACTK,MAAOH,EAAGG,MACVC,OAAQJ,EAAGI,OAAON,KAClBO,KAAM,kBAAML,IAJPC,GAOb,EAAKhB,SAASiB,KAAKY,MAGvB,EAAKR,SAAS,CAAEjB,OAAQ,EAAKJ,gB,+BAKjC,IAAM8B,EACFC,KAAK5B,MAAMC,OAAO4B,QAAU,EACxB,cAAC,IAAD,IAEAD,KAAK5B,MAAMC,OAEnB,OACI,cAAC,WAAD,CAAU6B,SAAU,cAAC,IAAD,IAApB,SACI,qCACI,oBAAIC,UAAU,OAAd,+BAGA,cAACtC,EAAD,CAAQuC,OAAQJ,KAAK9B,eACrB,cAACJ,EAAD,UAAeiC,a,GAtFXM,IAAMC,WA6FfvC","file":"static/js/5.f9b22d04.chunk.js","sourcesContent":["const RequestAPI =\n    'https://servicodados.ibge.gov.br/api/v1/localidades/estados';\n\nexport default RequestAPI;\n","import React, { Suspense, lazy } from 'react';\nimport RequestAPI from '../service/RequestAPI';\nimport { Loading, Warning } from './Feedback';\nimport axios from 'axios';\n\nconst Cards = lazy(() => import('./Cards'));\nconst Search = lazy(() => import('./Search'));\nconst RenderResult = lazy(() => import('./Render'));\n\ninterface ListStateProps {\n    dataList: string[];\n}\ninterface MyState {\n    amount: any | any[];\n}\n\nclass ListState extends React.Component<\n    ListStateProps,\n    MyState\n> {\n    dataList: JSX.Element[];\n    constructor(props: any) {\n        super(props);\n        this.searchAction = this.searchAction.bind(this);\n        this.dataList = [];\n        this.state = { amount: <Loading /> };\n    }\n\n    componentDidMount() {\n        axios.get(RequestAPI).then(res => {\n            res.data.sort((a: any, b: any) =>\n                a.nome < b.nome\n                    ? -1\n                    : a.nome > b.nome\n                    ? 1\n                    : 0\n            );\n            res.data.forEach((el: any, idx: number) => {\n                this.dataList.push(\n                    <Cards\n                        key={idx}\n                        nome={el.nome}\n                        sigla={el.sigla}\n                        regiao={el.regiao.nome}\n                        link={() => el}\n                    />\n                );\n            });\n            this.setState({ amount: this.dataList });\n        });\n    }\n\n    searchAction(e: any) {\n        axios.get(RequestAPI).then(list => {\n            this.dataList = [];\n            list.data = list.data.filter(\n                (el: any) =>\n                    el.nome\n                        .toLowerCase()\n                        .indexOf(\n                            e.target.value.toLowerCase()\n                        ) !== -1\n            );\n            list.data.sort((a: any, b: any) =>\n                a.nome < b.nome\n                    ? -1\n                    : a.nome > b.nome\n                    ? 1\n                    : 0\n            );\n\n            list.data.forEach((el: any, idx: number) => {\n                let dataMount = (\n                    <Cards\n                        key={idx}\n                        nome={el.nome}\n                        sigla={el.sigla}\n                        regiao={el.regiao.nome}\n                        link={() => el}\n                    />\n                );\n                this.dataList.push(dataMount);\n            });\n\n            this.setState({ amount: this.dataList });\n        });\n    }\n\n    render() {\n        const mount =\n            this.state.amount.length <= 0 ? (\n                <Warning />\n            ) : (\n                this.state.amount\n            );\n        return (\n            <Suspense fallback={<Loading />}>\n                <>\n                    <h1 className=\"py-3\">\n                        Estados do Brasil\n                    </h1>\n                    <Search search={this.searchAction} />\n                    <RenderResult>{mount}</RenderResult>\n                </>\n            </Suspense>\n        );\n    }\n}\n\nexport default ListState;\n"],"sourceRoot":""}