{"version":3,"file":"static/js/16.8d8ea26e.chunk.js","mappings":"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","sources":["service/RequestAPI.ts","Components/ListStates/ListState.tsx","Components/State/State.tsx","Components/Router.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst instanceAPI = axios.create({\n    baseURL: 'https://servicodados.ibge.gov.br/api/v1/localidades/',\n    headers: { 'X-Custom-Header': 'tmx-mercury' },\n});\n\nexport { instanceAPI };\n","import React, { Suspense, lazy, useEffect, useState } from 'react';\nimport { instanceAPI } from '../../service/RequestAPI';\nimport { TCard } from '../../types';\nimport { Loading, Warning } from '../Feedback/Feedback';\n\nconst Cards = lazy(() => import('../Cards'));\nconst Search = lazy(() => import('../Search'));\nconst RenderResult = lazy(() => import('../Render'));\n\nconst ListState = () => {\n    const [data, setData] = useState<[]>([]);\n    const [renderData, setRenderData] = useState<[] | any>([]);\n\n    const getCards = (e: TCard) => (\n        <Cards key={e.id} nome={e.nome} sigla={e.sigla} regiao={e.regiao.nome} link={() => e} />\n    );\n\n    useEffect(() => {\n        (async () => {\n            const { data } = await instanceAPI.get('estados');\n            setData(data);\n            data.sort((a: { nome: number }, b: { nome: number }) => (a.nome < b.nome ? -1 : a.nome > b.nome ? 1 : 0));\n            setRenderData(data.map((info: TCard) => getCards(info)));\n        })();\n    }, []);\n\n    const searchAction = (e: any) => {\n        const searchCards = data.filter((el: any) => {\n            const search = new RegExp(e.target.value, 'gi');\n            const input = el.nome;\n            return search.test(input);\n        });\n\n        setRenderData(searchCards.map((info: TCard) => getCards(info)));\n    };\n\n    return (\n        <Suspense fallback={<Loading />}>\n            <h1 className=\"py-3\" data-testid=\"title-list-state\">\n                {' '}\n                Estados do Brasil{' '}\n            </h1>\n            <Search search={searchAction} />\n            <RenderResult>{!renderData.length ? <Warning /> : renderData}</RenderResult>\n        </Suspense>\n    );\n};\n\nexport { ListState };\n","import React, { lazy, useEffect, useState } from 'react';\n\nimport { Link, useParams } from 'react-router-dom';\n\nimport { Loading } from '../Feedback/Feedback';\nconst City = lazy(() => import('../City'));\n\nimport { instanceAPI } from '../../service/RequestAPI';\n\nconst State = () => {\n    const [dataState, setDataStates] = useState<null>(null);\n    const { estado } = useParams();\n\n    useEffect(() => {\n        (async () => {\n            const { data } = await instanceAPI.get(`estados/${estado}/municipios`);\n            setDataStates(\n                data.map((info: any) => <City key={info.id} nome={info.nome} mesorregiao={info.microrregiao.nome} />)\n            );\n        })();\n    }, [estado]);\n\n    return (\n        <>\n            <h1 className=\"mt-3\">Munc√≠pios do {estado?.toUpperCase()}</h1>\n            <Link to=\"/\" className=\"btn btn-link mb-3\">\n                Voltar para os estados\n            </Link>\n            {dataState || <Loading />}\n        </>\n    );\n};\n\nexport { State };\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport ListState from './ListStates';\nimport { State } from './State';\n\nconst Router = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<ListState />} />\n            <Route path=\"/estado/:estado\" element={<State />} />\n        </Routes>\n    );\n};\n\nexport { Router as default };\n"],"names":["instanceAPI","axios","baseURL","headers","Cards","lazy","Search","RenderResult","ListState","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","renderData","setRenderData","getCards","e","_jsx","nome","sigla","regiao","link","id","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$instanceAPI$ge","wrap","_context","prev","next","get","sent","sort","a","b","map","info","stop","_jsxs","Suspense","fallback","Loading","children","className","search","searchCards","filter","el","RegExp","target","value","input","test","length","Warning","City","State","dataState","setDataStates","estado","useParams","concat","mesorregiao","microrregiao","_Fragment","toUpperCase","Link","to","Router","Routes","Route","path","element"],"sourceRoot":""}